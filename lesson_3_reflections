When would you want to use a remote repository rather than keeping all your work local?

  This is when you would want other people to edit and make changes to the project and keep track of all the changes made by these people. 
  
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  Because these changes can affect changes that were made in the local and may be very different from each other. Therefore it is better to manually pull and push changes so that if there are more than one people working on a certain project then there is not conflict in what is being done to the project.
  
  Describe the differences between forks, clones, and branches. When would you use one instead of another?
  
  Forks clone a different person's repository and make their work yours so that you can make the changes that you would want on it without having to get the other person's permission. Clones can clone repositories unto your local computer so that you can make changes better on that computer, and if you clone another person's repositiory and do not have permission, then there is a limit to what you would want to do. Branches are a deviation from the master branch so that you can experiment and create something different and then merge it back together if it works out. I would use each one depending on the circumstances of what needs to be done. 
  
  What is the benefit of having a copy of the last known state of the remote stored locally?
  
  It helps with the changes that are being made on GitHub itself, so if there was a changes made on GitHub then there is back up stored locally.
  
  How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  
  There would have to be constant communication through email sending files between other parties as files are changing constantly throughout the project. It would be easier to make changes if there were two people working on the project, but will get progressively harder to keep track of the changes made after more people are involved with the project.
  
  When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  
  This is when you would want to experiment with the code differently and not lose the work that has been done up until that moment in time. The benefits are that you have the socail aspect of having that branch being used by yourself and other people while other people could also experiement with something different or continue to work on the main project.
  
